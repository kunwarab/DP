#include <bits/stdc++.h>
using namespace std;

#define ll long long int

vector<vector<int>> dp;
vector<int> a;

int solve(int i, int S) {
  // Base conditions
  if (i == -1) {
    // outside the array
    if (S == 0) return 1;
    return 0;
  }

  if (S < 0) {
    // It's not possible to get negative sum
    // Impossible to get such subset
    return 0;
  }

  // Memoization
  if (dp[i][S] != -1) {
    cout << "Returned already computed answer for state (" << i << ", " << S << ") : " << dp[i][S] << "\n";
    return dp[i][S];
  }

  // Computation
  dp[i][S] = (solve(i - 1, S) || solve(i - 1, S - a[i]));
  cout << "Computed answer for state (" << i << ", " << S << ") : " << dp[i][S] << "\n";
  return dp[i][S];
}

int main() {
  ios_base::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);

  int n, T;
  cin >> n >> T;

  a.resize(n);
  // a[i] is always >= 0.
  for (int i = 0; i < n; i++) {
    cin >> a[i];
  }  

  // n x T
  // -1 -> Not computed
  // 0 -> There does not exist a subset of sum S
  // 1 -> There exists a subset
  dp.resize(n, vector<int>(T + 1, -1));

  if (solve(n - 1, T) == 1) {
    cout << "YES\n";
  }
  else {
    cout << "NO\n";
  }

  return 0;
}
